// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profiles.sql

package storage

import (
	"context"
	"database/sql"
	"errors"
	"github.com/eser/aya.is-services/pkg/api/business/profiles"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO "profile" (id, slug)
VALUES ($1, $2) RETURNING id, slug, kind, custom_domain, profile_picture_uri, pronouns, title, description, properties, created_at, updated_at, deleted_at
`

// CreateProfile
//
//	INSERT INTO "profile" (id, slug)
//	VALUES ($1, $2) RETURNING id, slug, kind, custom_domain, profile_picture_uri, pronouns, title, description, properties, created_at, updated_at, deleted_at
func (q *Queries) CreateProfile(ctx context.Context, arg profiles.CreateProfileParams) (*profiles.Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile, arg.Id, arg.Slug)
	var i profiles.Profile
	err := row.Scan(
		&i.Id,
		&i.Slug,
		&i.Kind,
		&i.CustomDomain,
		&i.ProfilePictureUri,
		&i.Pronouns,
		&i.Title,
		&i.Description,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	if err != nil && errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}
	return &i, err
}

const deleteProfile = `-- name: DeleteProfile :execrows
UPDATE "profile"
SET deleted_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
`

// DeleteProfile
//
//	UPDATE "profile"
//	SET deleted_at = NOW()
//	WHERE id = $1
//	  AND deleted_at IS NULL
func (q *Queries) DeleteProfile(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteProfile, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getProfileById = `-- name: GetProfileById :one
SELECT id, slug, kind, custom_domain, profile_picture_uri, pronouns, title, description, properties, created_at, updated_at, deleted_at
FROM "profile"
WHERE id = $1
  AND deleted_at IS NULL
LIMIT 1
`

// GetProfileById
//
//	SELECT id, slug, kind, custom_domain, profile_picture_uri, pronouns, title, description, properties, created_at, updated_at, deleted_at
//	FROM "profile"
//	WHERE id = $1
//	  AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetProfileById(ctx context.Context, id string) (*profiles.Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileById, id)
	var i profiles.Profile
	err := row.Scan(
		&i.Id,
		&i.Slug,
		&i.Kind,
		&i.CustomDomain,
		&i.ProfilePictureUri,
		&i.Pronouns,
		&i.Title,
		&i.Description,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	if err != nil && errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}
	return &i, err
}

const getProfileBySlug = `-- name: GetProfileBySlug :one
SELECT id, slug, kind, custom_domain, profile_picture_uri, pronouns, title, description, properties, created_at, updated_at, deleted_at
FROM "profile"
WHERE slug = $1
  AND deleted_at IS NULL
LIMIT 1
`

// GetProfileBySlug
//
//	SELECT id, slug, kind, custom_domain, profile_picture_uri, pronouns, title, description, properties, created_at, updated_at, deleted_at
//	FROM "profile"
//	WHERE slug = $1
//	  AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetProfileBySlug(ctx context.Context, slug string) (*profiles.Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileBySlug, slug)
	var i profiles.Profile
	err := row.Scan(
		&i.Id,
		&i.Slug,
		&i.Kind,
		&i.CustomDomain,
		&i.ProfilePictureUri,
		&i.Pronouns,
		&i.Title,
		&i.Description,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	if err != nil && errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}
	return &i, err
}

const getProfileLinksForKind = `-- name: GetProfileLinksForKind :many
SELECT pl.id, pl.profile_id, pl.kind, pl."order", pl.is_managed, pl.is_verified, pl.remote_id, pl.public_id, pl.uri, pl.title, pl.auth_provider, pl.auth_access_token_scope, pl.auth_access_token, pl.auth_access_token_expires_at, pl.auth_refresh_token, pl.auth_refresh_token_expires_at, pl.properties, pl.created_at, pl.updated_at, pl.deleted_at
FROM "profile_link" pl
  INNER JOIN "profile" p ON pl.profile_id = p.id
  AND p.deleted_at IS NULL
WHERE pl.kind = $1
  AND pl.deleted_at IS NULL
`

// GetProfileLinksForKind
//
//	SELECT pl.id, pl.profile_id, pl.kind, pl."order", pl.is_managed, pl.is_verified, pl.remote_id, pl.public_id, pl.uri, pl.title, pl.auth_provider, pl.auth_access_token_scope, pl.auth_access_token, pl.auth_access_token_expires_at, pl.auth_refresh_token, pl.auth_refresh_token_expires_at, pl.properties, pl.created_at, pl.updated_at, pl.deleted_at
//	FROM "profile_link" pl
//	  INNER JOIN "profile" p ON pl.profile_id = p.id
//	  AND p.deleted_at IS NULL
//	WHERE pl.kind = $1
//	  AND pl.deleted_at IS NULL
func (q *Queries) GetProfileLinksForKind(ctx context.Context, kind string) ([]*profiles.ProfileLink, error) {
	rows, err := q.db.QueryContext(ctx, getProfileLinksForKind, kind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*profiles.ProfileLink{}
	for rows.Next() {
		var i profiles.ProfileLink
		if err := rows.Scan(
			&i.Id,
			&i.ProfileId,
			&i.Kind,
			&i.Order,
			&i.IsManaged,
			&i.IsVerified,
			&i.RemoteId,
			&i.PublicId,
			&i.Uri,
			&i.Title,
			&i.AuthProvider,
			&i.AuthAccessTokenScope,
			&i.AuthAccessToken,
			&i.AuthAccessTokenExpiresAt,
			&i.AuthRefreshToken,
			&i.AuthRefreshTokenExpiresAt,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfiles = `-- name: ListProfiles :many
SELECT id, slug, kind, custom_domain, profile_picture_uri, pronouns, title, description, properties, created_at, updated_at, deleted_at
FROM "profile"
WHERE deleted_at IS NULL
`

// ListProfiles
//
//	SELECT id, slug, kind, custom_domain, profile_picture_uri, pronouns, title, description, properties, created_at, updated_at, deleted_at
//	FROM "profile"
//	WHERE deleted_at IS NULL
func (q *Queries) ListProfiles(ctx context.Context) ([]*profiles.Profile, error) {
	rows, err := q.db.QueryContext(ctx, listProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*profiles.Profile{}
	for rows.Next() {
		var i profiles.Profile
		if err := rows.Scan(
			&i.Id,
			&i.Slug,
			&i.Kind,
			&i.CustomDomain,
			&i.ProfilePictureUri,
			&i.Pronouns,
			&i.Title,
			&i.Description,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :execrows
UPDATE "profile"
SET slug = $1
WHERE id = $2
  AND deleted_at IS NULL
`

// UpdateProfile
//
//	UPDATE "profile"
//	SET slug = $1
//	WHERE id = $2
//	  AND deleted_at IS NULL
func (q *Queries) UpdateProfile(ctx context.Context, arg profiles.UpdateProfileParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateProfile, arg.Slug, arg.Id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
