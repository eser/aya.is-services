// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package storage

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO session (
    id,
    status,
    oauth_request_state,
    oauth_request_code_verifier,
    oauth_redirect_uri,
    logged_in_user_id,
    logged_in_at,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, status, oauth_request_state, oauth_request_code_verifier, oauth_redirect_uri, logged_in_user_id, logged_in_at, expires_at, created_at, updated_at
`

type CreateSessionParams struct {
	Id                       string         `db:"id" json:"id"`
	Status                   string         `db:"status" json:"status"`
	OauthRequestState        string         `db:"oauth_request_state" json:"oauth_request_state"`
	OauthRequestCodeVerifier string         `db:"oauth_request_code_verifier" json:"oauth_request_code_verifier"`
	OauthRedirectUri         sql.NullString `db:"oauth_redirect_uri" json:"oauth_redirect_uri"`
	LoggedInUserId           sql.NullString `db:"logged_in_user_id" json:"logged_in_user_id"`
	LoggedInAt               sql.NullTime   `db:"logged_in_at" json:"logged_in_at"`
	ExpiresAt                sql.NullTime   `db:"expires_at" json:"expires_at"`
}

// CreateSession
//
//	INSERT INTO session (
//	    id,
//	    status,
//	    oauth_request_state,
//	    oauth_request_code_verifier,
//	    oauth_redirect_uri,
//	    logged_in_user_id,
//	    logged_in_at,
//	    expires_at
//	) VALUES (
//	    $1, $2, $3, $4, $5, $6, $7, $8
//	) RETURNING id, status, oauth_request_state, oauth_request_code_verifier, oauth_redirect_uri, logged_in_user_id, logged_in_at, expires_at, created_at, updated_at
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Id,
		arg.Status,
		arg.OauthRequestState,
		arg.OauthRequestCodeVerifier,
		arg.OauthRedirectUri,
		arg.LoggedInUserId,
		arg.LoggedInAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.Id,
		&i.Status,
		&i.OauthRequestState,
		&i.OauthRequestCodeVerifier,
		&i.OauthRedirectUri,
		&i.LoggedInUserId,
		&i.LoggedInAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, status, oauth_request_state, oauth_request_code_verifier, oauth_redirect_uri, logged_in_user_id, logged_in_at, expires_at, created_at, updated_at
FROM session WHERE id = $1
`

type GetSessionByIDParams struct {
	Id string `db:"id" json:"id"`
}

// GetSessionByID
//
//	SELECT id, status, oauth_request_state, oauth_request_code_verifier, oauth_redirect_uri, logged_in_user_id, logged_in_at, expires_at, created_at, updated_at
//	FROM session WHERE id = $1
func (q *Queries) GetSessionByID(ctx context.Context, arg GetSessionByIDParams) (*Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, arg.Id)
	var i Session
	err := row.Scan(
		&i.Id,
		&i.Status,
		&i.OauthRequestState,
		&i.OauthRequestCodeVerifier,
		&i.OauthRedirectUri,
		&i.LoggedInUserId,
		&i.LoggedInAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateSessionLoggedInAt = `-- name: UpdateSessionLoggedInAt :exec
UPDATE session SET logged_in_at = $2, updated_at = NOW() WHERE id = $1
`

type UpdateSessionLoggedInAtParams struct {
	Id         string       `db:"id" json:"id"`
	LoggedInAt sql.NullTime `db:"logged_in_at" json:"logged_in_at"`
}

// UpdateSessionLoggedInAt
//
//	UPDATE session SET logged_in_at = $2, updated_at = NOW() WHERE id = $1
func (q *Queries) UpdateSessionLoggedInAt(ctx context.Context, arg UpdateSessionLoggedInAtParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionLoggedInAt, arg.Id, arg.LoggedInAt)
	return err
}
