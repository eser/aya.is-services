// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profiles.sql

package storage

import (
	"context"
	"database/sql"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO "profile" (id, slug)
VALUES ($1, $2) RETURNING id, slug, kind, custom_domain, profile_picture_uri, pronouns, properties, created_at, updated_at, deleted_at
`

type CreateProfileParams struct {
	Id   string `db:"id" json:"id"`
	Slug string `db:"slug" json:"slug"`
}

// CreateProfile
//
//	INSERT INTO "profile" (id, slug)
//	VALUES ($1, $2) RETURNING id, slug, kind, custom_domain, profile_picture_uri, pronouns, properties, created_at, updated_at, deleted_at
func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (*Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile, arg.Id, arg.Slug)
	var i Profile
	err := row.Scan(
		&i.Id,
		&i.Slug,
		&i.Kind,
		&i.CustomDomain,
		&i.ProfilePictureUri,
		&i.Pronouns,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteProfile = `-- name: DeleteProfile :execrows
UPDATE "profile"
SET deleted_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
`

type DeleteProfileParams struct {
	Id string `db:"id" json:"id"`
}

// DeleteProfile
//
//	UPDATE "profile"
//	SET deleted_at = NOW()
//	WHERE id = $1
//	  AND deleted_at IS NULL
func (q *Queries) DeleteProfile(ctx context.Context, arg DeleteProfileParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteProfile, arg.Id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getProfileByCustomDomain = `-- name: GetProfileByCustomDomain :one
SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM "profile" p
  INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
  AND pt.locale_code = $1
WHERE p.custom_domain = $2
  AND p.deleted_at IS NULL
LIMIT 1
`

type GetProfileByCustomDomainParams struct {
	LocaleCode string         `db:"locale_code" json:"locale_code"`
	Domain     sql.NullString `db:"domain" json:"domain"`
}

type GetProfileByCustomDomainRow struct {
	Profile   Profile   `db:"profile" json:"profile"`
	ProfileTx ProfileTx `db:"profile_tx" json:"profile_tx"`
}

// GetProfileByCustomDomain
//
//	SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM "profile" p
//	  INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
//	  AND pt.locale_code = $1
//	WHERE p.custom_domain = $2
//	  AND p.deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetProfileByCustomDomain(ctx context.Context, arg GetProfileByCustomDomainParams) (*GetProfileByCustomDomainRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileByCustomDomain, arg.LocaleCode, arg.Domain)
	var i GetProfileByCustomDomainRow
	err := row.Scan(
		&i.Profile.Id,
		&i.Profile.Slug,
		&i.Profile.Kind,
		&i.Profile.CustomDomain,
		&i.Profile.ProfilePictureUri,
		&i.Profile.Pronouns,
		&i.Profile.Properties,
		&i.Profile.CreatedAt,
		&i.Profile.UpdatedAt,
		&i.Profile.DeletedAt,
		&i.ProfileTx.ProfileId,
		&i.ProfileTx.LocaleCode,
		&i.ProfileTx.Title,
		&i.ProfileTx.Description,
		&i.ProfileTx.Properties,
	)
	return &i, err
}

const getProfileById = `-- name: GetProfileById :one
SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM "profile" p
  INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
  AND pt.locale_code = $1
WHERE p.id = $2
  AND p.deleted_at IS NULL
LIMIT 1
`

type GetProfileByIdParams struct {
	LocaleCode string `db:"locale_code" json:"locale_code"`
	Id         string `db:"id" json:"id"`
}

type GetProfileByIdRow struct {
	Profile   Profile   `db:"profile" json:"profile"`
	ProfileTx ProfileTx `db:"profile_tx" json:"profile_tx"`
}

// GetProfileById
//
//	SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM "profile" p
//	  INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
//	  AND pt.locale_code = $1
//	WHERE p.id = $2
//	  AND p.deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetProfileById(ctx context.Context, arg GetProfileByIdParams) (*GetProfileByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileById, arg.LocaleCode, arg.Id)
	var i GetProfileByIdRow
	err := row.Scan(
		&i.Profile.Id,
		&i.Profile.Slug,
		&i.Profile.Kind,
		&i.Profile.CustomDomain,
		&i.Profile.ProfilePictureUri,
		&i.Profile.Pronouns,
		&i.Profile.Properties,
		&i.Profile.CreatedAt,
		&i.Profile.UpdatedAt,
		&i.Profile.DeletedAt,
		&i.ProfileTx.ProfileId,
		&i.ProfileTx.LocaleCode,
		&i.ProfileTx.Title,
		&i.ProfileTx.Description,
		&i.ProfileTx.Properties,
	)
	return &i, err
}

const getProfileBySlug = `-- name: GetProfileBySlug :one
SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM "profile" p
  INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
  AND pt.locale_code = $1
WHERE p.slug = $2
  AND p.deleted_at IS NULL
LIMIT 1
`

type GetProfileBySlugParams struct {
	LocaleCode string `db:"locale_code" json:"locale_code"`
	Slug       string `db:"slug" json:"slug"`
}

type GetProfileBySlugRow struct {
	Profile   Profile   `db:"profile" json:"profile"`
	ProfileTx ProfileTx `db:"profile_tx" json:"profile_tx"`
}

// GetProfileBySlug
//
//	SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM "profile" p
//	  INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
//	  AND pt.locale_code = $1
//	WHERE p.slug = $2
//	  AND p.deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetProfileBySlug(ctx context.Context, arg GetProfileBySlugParams) (*GetProfileBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileBySlug, arg.LocaleCode, arg.Slug)
	var i GetProfileBySlugRow
	err := row.Scan(
		&i.Profile.Id,
		&i.Profile.Slug,
		&i.Profile.Kind,
		&i.Profile.CustomDomain,
		&i.Profile.ProfilePictureUri,
		&i.Profile.Pronouns,
		&i.Profile.Properties,
		&i.Profile.CreatedAt,
		&i.Profile.UpdatedAt,
		&i.Profile.DeletedAt,
		&i.ProfileTx.ProfileId,
		&i.ProfileTx.LocaleCode,
		&i.ProfileTx.Title,
		&i.ProfileTx.Description,
		&i.ProfileTx.Properties,
	)
	return &i, err
}

const getProfileLinksForKind = `-- name: GetProfileLinksForKind :many
SELECT pl.id, pl.profile_id, pl.kind, pl."order", pl.is_managed, pl.is_verified, pl.remote_id, pl.public_id, pl.uri, pl.title, pl.auth_provider, pl.auth_access_token_scope, pl.auth_access_token, pl.auth_access_token_expires_at, pl.auth_refresh_token, pl.auth_refresh_token_expires_at, pl.properties, pl.created_at, pl.updated_at, pl.deleted_at
FROM "profile_link" pl
  INNER JOIN "profile" p ON pl.profile_id = p.id
  AND p.deleted_at IS NULL
WHERE pl.kind = $1
  AND pl.deleted_at IS NULL
`

type GetProfileLinksForKindParams struct {
	Kind string `db:"kind" json:"kind"`
}

// GetProfileLinksForKind
//
//	SELECT pl.id, pl.profile_id, pl.kind, pl."order", pl.is_managed, pl.is_verified, pl.remote_id, pl.public_id, pl.uri, pl.title, pl.auth_provider, pl.auth_access_token_scope, pl.auth_access_token, pl.auth_access_token_expires_at, pl.auth_refresh_token, pl.auth_refresh_token_expires_at, pl.properties, pl.created_at, pl.updated_at, pl.deleted_at
//	FROM "profile_link" pl
//	  INNER JOIN "profile" p ON pl.profile_id = p.id
//	  AND p.deleted_at IS NULL
//	WHERE pl.kind = $1
//	  AND pl.deleted_at IS NULL
func (q *Queries) GetProfileLinksForKind(ctx context.Context, arg GetProfileLinksForKindParams) ([]*ProfileLink, error) {
	rows, err := q.db.QueryContext(ctx, getProfileLinksForKind, arg.Kind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ProfileLink{}
	for rows.Next() {
		var i ProfileLink
		if err := rows.Scan(
			&i.Id,
			&i.ProfileId,
			&i.Kind,
			&i.Order,
			&i.IsManaged,
			&i.IsVerified,
			&i.RemoteId,
			&i.PublicId,
			&i.Uri,
			&i.Title,
			&i.AuthProvider,
			&i.AuthAccessTokenScope,
			&i.AuthAccessToken,
			&i.AuthAccessTokenExpiresAt,
			&i.AuthRefreshToken,
			&i.AuthRefreshTokenExpiresAt,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfilePagesByProfileId = `-- name: GetProfilePagesByProfileId :many
SELECT pp.id, pp.slug, pp.cover_picture_uri, ppt.title, ppt.summary
FROM "profile_page" pp
  INNER JOIN "profile_page_tx" ppt ON pp.id = ppt.profile_page_id
  AND ppt.locale_code = $1
WHERE pp.profile_id = $2
  AND pp.deleted_at IS NULL
ORDER BY pp.order
`

type GetProfilePagesByProfileIdParams struct {
	LocaleCode string `db:"locale_code" json:"locale_code"`
	ProfileId  string `db:"profile_id" json:"profile_id"`
}

type GetProfilePagesByProfileIdRow struct {
	Id              string         `db:"id" json:"id"`
	Slug            string         `db:"slug" json:"slug"`
	CoverPictureUri sql.NullString `db:"cover_picture_uri" json:"cover_picture_uri"`
	Title           string         `db:"title" json:"title"`
	Summary         string         `db:"summary" json:"summary"`
}

// GetProfilePagesByProfileId
//
//	SELECT pp.id, pp.slug, pp.cover_picture_uri, ppt.title, ppt.summary
//	FROM "profile_page" pp
//	  INNER JOIN "profile_page_tx" ppt ON pp.id = ppt.profile_page_id
//	  AND ppt.locale_code = $1
//	WHERE pp.profile_id = $2
//	  AND pp.deleted_at IS NULL
//	ORDER BY pp.order
func (q *Queries) GetProfilePagesByProfileId(ctx context.Context, arg GetProfilePagesByProfileIdParams) ([]*GetProfilePagesByProfileIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfilePagesByProfileId, arg.LocaleCode, arg.ProfileId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetProfilePagesByProfileIdRow{}
	for rows.Next() {
		var i GetProfilePagesByProfileIdRow
		if err := rows.Scan(
			&i.Id,
			&i.Slug,
			&i.CoverPictureUri,
			&i.Title,
			&i.Summary,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfiles = `-- name: ListProfiles :many
SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM "profile" p
  INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
  AND pt.locale_code = $1
WHERE p.deleted_at IS NULL
`

type ListProfilesParams struct {
	LocaleCode string `db:"locale_code" json:"locale_code"`
}

type ListProfilesRow struct {
	Profile   Profile   `db:"profile" json:"profile"`
	ProfileTx ProfileTx `db:"profile_tx" json:"profile_tx"`
}

// ListProfiles
//
//	SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM "profile" p
//	  INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
//	  AND pt.locale_code = $1
//	WHERE p.deleted_at IS NULL
func (q *Queries) ListProfiles(ctx context.Context, arg ListProfilesParams) ([]*ListProfilesRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfiles, arg.LocaleCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListProfilesRow{}
	for rows.Next() {
		var i ListProfilesRow
		if err := rows.Scan(
			&i.Profile.Id,
			&i.Profile.Slug,
			&i.Profile.Kind,
			&i.Profile.CustomDomain,
			&i.Profile.ProfilePictureUri,
			&i.Profile.Pronouns,
			&i.Profile.Properties,
			&i.Profile.CreatedAt,
			&i.Profile.UpdatedAt,
			&i.Profile.DeletedAt,
			&i.ProfileTx.ProfileId,
			&i.ProfileTx.LocaleCode,
			&i.ProfileTx.Title,
			&i.ProfileTx.Description,
			&i.ProfileTx.Properties,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :execrows
UPDATE "profile"
SET slug = $1
WHERE id = $2
  AND deleted_at IS NULL
`

type UpdateProfileParams struct {
	Slug string `db:"slug" json:"slug"`
	Id   string `db:"id" json:"id"`
}

// UpdateProfile
//
//	UPDATE "profile"
//	SET slug = $1
//	WHERE id = $2
//	  AND deleted_at IS NULL
func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateProfile, arg.Slug, arg.Id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
