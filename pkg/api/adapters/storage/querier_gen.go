// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package storage

import (
	"context"
)

type Querier interface {
	//CreateProfile
	//
	//  INSERT INTO "profile" (id, slug)
	//  VALUES ($1, $2) RETURNING id, slug, kind, custom_domain, profile_picture_uri, pronouns, properties, created_at, updated_at, deleted_at
	CreateProfile(ctx context.Context, arg CreateProfileParams) (*Profile, error)
	//CreateUser
	//
	//  INSERT INTO "user" (
	//      id,
	//      kind,
	//      NAME,
	//      email,
	//      phone,
	//      github_handle,
	//      github_remote_id,
	//      bsky_handle,
	//      bsky_remote_id,
	//      x_handle,
	//      x_remote_id,
	//      individual_profile_id
	//    )
	//  VALUES (
	//      $1,
	//      $2,
	//      $3,
	//      $4,
	//      $5,
	//      $6,
	//      $7,
	//      $8,
	//      $9,
	//      $10,
	//      $11,
	//      $12
	//    ) RETURNING id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	//DeleteProfile
	//
	//  UPDATE "profile"
	//  SET deleted_at = NOW()
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	DeleteProfile(ctx context.Context, arg DeleteProfileParams) (int64, error)
	//DeleteUser
	//
	//  UPDATE "user"
	//  SET deleted_at = NOW()
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	DeleteUser(ctx context.Context, arg DeleteUserParams) (int64, error)
	//GetProfileByCustomDomain
	//
	//  SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "profile" p
	//    INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
	//    AND pt.locale_code = $1
	//  WHERE p.custom_domain = $2
	//    AND p.deleted_at IS NULL
	//  LIMIT 1
	GetProfileByCustomDomain(ctx context.Context, arg GetProfileByCustomDomainParams) (*GetProfileByCustomDomainRow, error)
	//GetProfileById
	//
	//  SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "profile" p
	//    INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
	//    AND pt.locale_code = $1
	//  WHERE p.id = $2
	//    AND p.deleted_at IS NULL
	//  LIMIT 1
	GetProfileById(ctx context.Context, arg GetProfileByIdParams) (*GetProfileByIdRow, error)
	//GetProfileBySlug
	//
	//  SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "profile" p
	//    INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
	//    AND pt.locale_code = $1
	//  WHERE p.slug = $2
	//    AND p.deleted_at IS NULL
	//  LIMIT 1
	GetProfileBySlug(ctx context.Context, arg GetProfileBySlugParams) (*GetProfileBySlugRow, error)
	//GetProfileLinksForKind
	//
	//  SELECT pl.id, pl.profile_id, pl.kind, pl."order", pl.is_managed, pl.is_verified, pl.remote_id, pl.public_id, pl.uri, pl.title, pl.auth_provider, pl.auth_access_token_scope, pl.auth_access_token, pl.auth_access_token_expires_at, pl.auth_refresh_token, pl.auth_refresh_token_expires_at, pl.properties, pl.created_at, pl.updated_at, pl.deleted_at
	//  FROM "profile_link" pl
	//    INNER JOIN "profile" p ON pl.profile_id = p.id
	//    AND p.deleted_at IS NULL
	//  WHERE pl.kind = $1
	//    AND pl.deleted_at IS NULL
	GetProfileLinksForKind(ctx context.Context, arg GetProfileLinksForKindParams) ([]*ProfileLink, error)
	//GetStoryById
	//
	//  SELECT s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.title, s.summary, s.content, s.properties, s.published_at, s.created_at, s.updated_at, s.deleted_at, st.story_id, st.locale_code, st.title, st.summary, st.content
	//  FROM "story" s
	//    INNER JOIN "story_tx" st ON s.id = st.story_id
	//    AND st.locale_code = $1
	//  WHERE s.id = $2
	//    AND s.deleted_at IS NULL
	//  LIMIT 1
	GetStoryById(ctx context.Context, arg GetStoryByIdParams) (*GetStoryByIdRow, error)
	//GetStoryBySlug
	//
	//  SELECT s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.title, s.summary, s.content, s.properties, s.published_at, s.created_at, s.updated_at, s.deleted_at, st.story_id, st.locale_code, st.title, st.summary, st.content
	//  FROM "story" s
	//    INNER JOIN "story_tx" st ON s.id = st.story_id
	//    AND st.locale_code = $1
	//  WHERE s.slug = $2
	//    AND s.deleted_at IS NULL
	//  LIMIT 1
	GetStoryBySlug(ctx context.Context, arg GetStoryBySlugParams) (*GetStoryBySlugRow, error)
	//GetUserByEmail
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE email = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (*User, error)
	//GetUserById
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetUserById(ctx context.Context, arg GetUserByIdParams) (*User, error)
	//ListProfiles
	//
	//  SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "profile" p
	//    INNER JOIN "profile_tx" pt ON p.id = pt.profile_id
	//    AND pt.locale_code = $1
	//  WHERE p.deleted_at IS NULL
	ListProfiles(ctx context.Context, arg ListProfilesParams) ([]*ListProfilesRow, error)
	//ListStories
	//
	//  SELECT s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.title, s.summary, s.content, s.properties, s.published_at, s.created_at, s.updated_at, s.deleted_at, st.story_id, st.locale_code, st.title, st.summary, st.content
	//  FROM "story" s
	//    INNER JOIN "story_tx" st ON s.id = st.story_id
	//    AND st.locale_code = $1
	//  WHERE s.deleted_at IS NULL
	ListStories(ctx context.Context, arg ListStoriesParams) ([]*ListStoriesRow, error)
	//ListUsers
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE deleted_at IS NULL
	ListUsers(ctx context.Context) ([]*User, error)
	//UpdateProfile
	//
	//  UPDATE "profile"
	//  SET slug = $1
	//  WHERE id = $2
	//    AND deleted_at IS NULL
	UpdateProfile(ctx context.Context, arg UpdateProfileParams) (int64, error)
	//UpdateUser
	//
	//  UPDATE "user"
	//  SET kind = $1,
	//    NAME = $2,
	//    email = $3,
	//    phone = $4,
	//    github_handle = $5,
	//    github_remote_id = $6,
	//    bsky_handle = $7,
	//    bsky_remote_id = $8,
	//    x_handle = $9,
	//    x_remote_id = $10,
	//    individual_profile_id = $11
	//  WHERE id = $12
	//    AND deleted_at IS NULL
	UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error)
}

var _ Querier = (*Queries)(nil)
