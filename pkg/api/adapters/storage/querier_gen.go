// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package storage

import (
	"context"
)

type Querier interface {
	//CreateProfile
	//
	//  INSERT INTO "profile" (id, slug)
	//  VALUES ($1, $2) RETURNING id, slug, kind, custom_domain, profile_picture_uri, pronouns, properties, created_at, updated_at, deleted_at
	CreateProfile(ctx context.Context, arg CreateProfileParams) (*Profile, error)
	//CreateUser
	//
	//  INSERT INTO "user" (
	//      id,
	//      kind,
	//      NAME,
	//      email,
	//      phone,
	//      github_handle,
	//      github_remote_id,
	//      bsky_handle,
	//      bsky_remote_id,
	//      x_handle,
	//      x_remote_id,
	//      individual_profile_id
	//    )
	//  VALUES (
	//      $1,
	//      $2,
	//      $3,
	//      $4,
	//      $5,
	//      $6,
	//      $7,
	//      $8,
	//      $9,
	//      $10,
	//      $11,
	//      $12
	//    ) RETURNING id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	//GetFromCache
	//
	//  SELECT value, updated_at
	//  FROM "cache"
	//  WHERE key = $1
	//  LIMIT 1
	GetFromCache(ctx context.Context, arg GetFromCacheParams) (*GetFromCacheRow, error)
	//GetFromCacheSince
	//
	//  SELECT value, updated_at
	//  FROM "cache"
	//  WHERE key = $1
	//    AND updated_at > $2
	//  LIMIT 1
	GetFromCacheSince(ctx context.Context, arg GetFromCacheSinceParams) (*GetFromCacheSinceRow, error)
	//GetProfileById
	//
	//  SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "profile" p
	//    INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
	//    AND pt.locale_code = $1
	//  WHERE p.id = $2
	//    AND p.deleted_at IS NULL
	//  LIMIT 1
	GetProfileById(ctx context.Context, arg GetProfileByIdParams) (*GetProfileByIdRow, error)
	//GetProfileIdByCustomDomain
	//
	//  SELECT id
	//  FROM "profile"
	//  WHERE custom_domain = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetProfileIdByCustomDomain(ctx context.Context, arg GetProfileIdByCustomDomainParams) (string, error)
	//GetProfileIdBySlug
	//
	//  SELECT id
	//  FROM "profile"
	//  WHERE slug = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetProfileIdBySlug(ctx context.Context, arg GetProfileIdBySlugParams) (string, error)
	//GetProfileLinksByProfileId
	//
	//  SELECT id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
	//  FROM "profile_link"
	//  WHERE profile_id = $1
	//    AND is_hidden = FALSE
	//    AND deleted_at IS NULL
	//  ORDER BY "order"
	GetProfileLinksByProfileId(ctx context.Context, arg GetProfileLinksByProfileIdParams) ([]*ProfileLink, error)
	//GetProfileLinksForKind
	//
	//  SELECT pl.id, pl.profile_id, pl.kind, pl."order", pl.is_managed, pl.is_verified, pl.is_hidden, pl.remote_id, pl.public_id, pl.uri, pl.title, pl.auth_provider, pl.auth_access_token_scope, pl.auth_access_token, pl.auth_access_token_expires_at, pl.auth_refresh_token, pl.auth_refresh_token_expires_at, pl.properties, pl.created_at, pl.updated_at, pl.deleted_at
	//  FROM "profile_link" pl
	//    INNER JOIN "profile" p ON p.id = pl.profile_id
	//    AND p.deleted_at IS NULL
	//  WHERE pl.kind = $1
	//    AND pl.deleted_at IS NULL
	//  ORDER BY pl."order"
	GetProfileLinksForKind(ctx context.Context, arg GetProfileLinksForKindParams) ([]*ProfileLink, error)
	//GetProfilePageByProfileIdAndSlug
	//
	//  SELECT pp.id, pp.profile_id, pp.slug, pp."order", pp.cover_picture_uri, pp.published_at, pp.created_at, pp.updated_at, pp.deleted_at, ppt.profile_page_id, ppt.locale_code, ppt.title, ppt.summary, ppt.content
	//  FROM "profile_page" pp
	//    INNER JOIN "profile_page_tx" ppt ON ppt.profile_page_id = pp.id
	//    AND ppt.locale_code = $1
	//  WHERE pp.profile_id = $2 AND pp.slug = $3 AND pp.deleted_at IS NULL
	//  ORDER BY pp."order"
	GetProfilePageByProfileIdAndSlug(ctx context.Context, arg GetProfilePageByProfileIdAndSlugParams) (*GetProfilePageByProfileIdAndSlugRow, error)
	//GetProfilePagesByProfileId
	//
	//  SELECT pp.id, pp.profile_id, pp.slug, pp."order", pp.cover_picture_uri, pp.published_at, pp.created_at, pp.updated_at, pp.deleted_at, ppt.profile_page_id, ppt.locale_code, ppt.title, ppt.summary, ppt.content
	//  FROM "profile_page" pp
	//    INNER JOIN "profile_page_tx" ppt ON ppt.profile_page_id = pp.id
	//    AND ppt.locale_code = $1
	//  WHERE pp.profile_id = $2
	//    AND pp.deleted_at IS NULL
	//  ORDER BY pp."order"
	GetProfilePagesByProfileId(ctx context.Context, arg GetProfilePagesByProfileIdParams) ([]*GetProfilePagesByProfileIdRow, error)
	//GetStoryById
	//
	//  SELECT s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.title, s.summary, s.content, s.properties, s.published_at, s.created_at, s.updated_at, s.deleted_at, st.story_id, st.locale_code, st.title, st.summary, st.content, p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "story" s
	//    INNER JOIN "story_tx" st ON st.story_id = s.id
	//    AND st.locale_code = $1
	//    LEFT JOIN "profile" p ON p.id = s.author_profile_id AND p.deleted_at IS NULL
	//    INNER JOIN "profile_tx" pt ON pt.profile_id = p.id AND pt.locale_code = $1
	//  WHERE s.id = $2
	//    AND s.deleted_at IS NULL
	//  LIMIT 1
	GetStoryById(ctx context.Context, arg GetStoryByIdParams) (*GetStoryByIdRow, error)
	//GetStoryIdBySlug
	//
	//  SELECT id
	//  FROM "story"
	//  WHERE slug = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetStoryIdBySlug(ctx context.Context, arg GetStoryIdBySlugParams) (string, error)
	//GetUserByEmail
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE email = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (*User, error)
	//GetUserById
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetUserById(ctx context.Context, arg GetUserByIdParams) (*User, error)
	//ListProfileMembershipsByProfileIdAndKind
	//
	//  SELECT
	//    pm.id, pm.profile_id, pm.user_id, pm.kind, pm.properties, pm.created_at, pm.updated_at, pm.deleted_at,
	//    pp.id, pp.slug, pp.kind, pp.custom_domain, pp.profile_picture_uri, pp.pronouns, pp.properties, pp.created_at, pp.updated_at, pp.deleted_at,
	//    ppt.profile_id, ppt.locale_code, ppt.title, ppt.description, ppt.properties
	//  FROM
	//  	"profile_membership" pm
	//    INNER JOIN "profile" pp ON pp.id = pm.profile_id AND pp.kind = $1 AND pp.deleted_at IS NULL
	//    INNER JOIN "profile_tx" ppt ON ppt.profile_id = pp.id
	//  	  AND ppt.locale_code = $2
	//    INNER JOIN "user" u ON u.id = pm.user_id AND u.deleted_at IS NULL
	//    INNER JOIN "profile" pc ON pc.id = u.individual_profile_id AND pc.deleted_at IS NULL
	//  WHERE pc.id = $3
	//    AND pm.deleted_at IS NULL
	ListProfileMembershipsByProfileIdAndKind(ctx context.Context, arg ListProfileMembershipsByProfileIdAndKindParams) ([]*ListProfileMembershipsByProfileIdAndKindRow, error)
	//ListProfiles
	//
	//  SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "profile" p
	//    INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
	//    AND pt.locale_code = $1
	//  WHERE ($2::TEXT IS NULL OR p.kind = $2::TEXT)
	//    AND p.deleted_at IS NULL
	ListProfiles(ctx context.Context, arg ListProfilesParams) ([]*ListProfilesRow, error)
	//ListStories
	//
	//  SELECT s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.title, s.summary, s.content, s.properties, s.published_at, s.created_at, s.updated_at, s.deleted_at, st.story_id, st.locale_code, st.title, st.summary, st.content, p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "story" s
	//    INNER JOIN "story_tx" st ON st.story_id = s.id
	//    AND ($1::TEXT IS NULL OR s.kind = $1::TEXT)
	//    AND ($2::CHAR(26) IS NULL OR s.author_profile_id = $2::CHAR(26))
	//    AND st.locale_code = $3
	//    LEFT JOIN "profile" p ON p.id = s.author_profile_id AND p.deleted_at IS NULL
	//    INNER JOIN "profile_tx" pt ON pt.profile_id = p.id AND pt.locale_code = $3
	//  WHERE s.deleted_at IS NULL
	//  ORDER BY s.published_at DESC
	ListStories(ctx context.Context, arg ListStoriesParams) ([]*ListStoriesRow, error)
	//ListUsers
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE ($1::TEXT IS NULL OR kind = $1::TEXT)
	//    AND deleted_at IS NULL
	ListUsers(ctx context.Context, arg ListUsersParams) ([]*User, error)
	//RemoveAllFromCache
	//
	//  DELETE FROM "cache"
	RemoveAllFromCache(ctx context.Context) (int64, error)
	//RemoveExpiredFromCache
	//
	//  DELETE FROM "cache"
	//  WHERE updated_at < $1
	RemoveExpiredFromCache(ctx context.Context, arg RemoveExpiredFromCacheParams) (int64, error)
	//RemoveFromCache
	//
	//  DELETE FROM "cache"
	//  WHERE key = $1
	RemoveFromCache(ctx context.Context, arg RemoveFromCacheParams) (int64, error)
	//RemoveProfile
	//
	//  UPDATE "profile"
	//  SET deleted_at = NOW()
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	RemoveProfile(ctx context.Context, arg RemoveProfileParams) (int64, error)
	//RemoveUser
	//
	//  UPDATE "user"
	//  SET deleted_at = NOW()
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	RemoveUser(ctx context.Context, arg RemoveUserParams) (int64, error)
	//SetInCache
	//
	//  INSERT INTO "cache" (key, value, updated_at)
	//  VALUES ($1, $2, NOW())
	//  ON CONFLICT ("key") DO UPDATE SET value = $2, updated_at = NOW()
	SetInCache(ctx context.Context, arg SetInCacheParams) (int64, error)
	//UpdateProfile
	//
	//  UPDATE "profile"
	//  SET slug = $1
	//  WHERE id = $2
	//    AND deleted_at IS NULL
	UpdateProfile(ctx context.Context, arg UpdateProfileParams) (int64, error)
	//UpdateUser
	//
	//  UPDATE "user"
	//  SET kind = $1,
	//    NAME = $2,
	//    email = $3,
	//    phone = $4,
	//    github_handle = $5,
	//    github_remote_id = $6,
	//    bsky_handle = $7,
	//    bsky_remote_id = $8,
	//    x_handle = $9,
	//    x_remote_id = $10,
	//    individual_profile_id = $11
	//  WHERE id = $12
	//    AND deleted_at IS NULL
	UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error)
}

var _ Querier = (*Queries)(nil)
