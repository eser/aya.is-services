// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stories.sql

package storage

import (
	"context"
	"database/sql"
	"errors"
	"github.com/eser/aya.is-services/pkg/api/business/stories"
)

const getStoryById = `-- name: GetStoryById :one
SELECT id, author_profile_id, slug, kind, status, is_featured, story_picture_uri, title, summary, content, properties, published_at, created_at, updated_at, deleted_at
FROM "story"
WHERE id = $1
  AND deleted_at IS NULL
LIMIT 1
`

// GetStoryById
//
//	SELECT id, author_profile_id, slug, kind, status, is_featured, story_picture_uri, title, summary, content, properties, published_at, created_at, updated_at, deleted_at
//	FROM "story"
//	WHERE id = $1
//	  AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetStoryById(ctx context.Context, id string) (*stories.Story, error) {
	row := q.db.QueryRowContext(ctx, getStoryById, id)
	var i stories.Story
	err := row.Scan(
		&i.Id,
		&i.AuthorProfileId,
		&i.Slug,
		&i.Kind,
		&i.Status,
		&i.IsFeatured,
		&i.StoryPictureUri,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.Properties,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	if err != nil && errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}
	return &i, err
}

const getStoryBySlug = `-- name: GetStoryBySlug :one
SELECT id, author_profile_id, slug, kind, status, is_featured, story_picture_uri, title, summary, content, properties, published_at, created_at, updated_at, deleted_at
FROM "story"
WHERE slug = $1
  AND deleted_at IS NULL
LIMIT 1
`

// GetStoryBySlug
//
//	SELECT id, author_profile_id, slug, kind, status, is_featured, story_picture_uri, title, summary, content, properties, published_at, created_at, updated_at, deleted_at
//	FROM "story"
//	WHERE slug = $1
//	  AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetStoryBySlug(ctx context.Context, slug string) (*stories.Story, error) {
	row := q.db.QueryRowContext(ctx, getStoryBySlug, slug)
	var i stories.Story
	err := row.Scan(
		&i.Id,
		&i.AuthorProfileId,
		&i.Slug,
		&i.Kind,
		&i.Status,
		&i.IsFeatured,
		&i.StoryPictureUri,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.Properties,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	if err != nil && errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}
	return &i, err
}

const listStories = `-- name: ListStories :many
SELECT id, author_profile_id, slug, kind, status, is_featured, story_picture_uri, title, summary, content, properties, published_at, created_at, updated_at, deleted_at
FROM "story"
WHERE deleted_at IS NULL
`

// ListStories
//
//	SELECT id, author_profile_id, slug, kind, status, is_featured, story_picture_uri, title, summary, content, properties, published_at, created_at, updated_at, deleted_at
//	FROM "story"
//	WHERE deleted_at IS NULL
func (q *Queries) ListStories(ctx context.Context) ([]*stories.Story, error) {
	rows, err := q.db.QueryContext(ctx, listStories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*stories.Story{}
	for rows.Next() {
		var i stories.Story
		if err := rows.Scan(
			&i.Id,
			&i.AuthorProfileId,
			&i.Slug,
			&i.Kind,
			&i.Status,
			&i.IsFeatured,
			&i.StoryPictureUri,
			&i.Title,
			&i.Summary,
			&i.Content,
			&i.Properties,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
